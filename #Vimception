#Vimception

Vim Demo: https://youtu.be/WyeNmUMZ7gY (press gx to open)
TODO: add .vimrc files to repo

###what is Vim?
 • "Vim is a terminal text editor - basically what 90's hackers use. It's for
    autistic savants and no-one else" 
    — the general concensus on Vim to non-users.
 • Vi IMproved - a free, opensource text editor for unix.
 • Vim aims to minimize the number of keystrokes.
 • Base on vi which was designed to be used over slow terminals.
 • First released publicly in 1991. (Vi released 1976)

###why use Vim (or another command line text editor such as Vim or Emacs)?
 • Vi - on all POSIX compliant systems
    ◦ If you know Vim you can stumble you way around Vi
 • light on RAM
    ◦ Raw - 2MB
    ◦ With my plugins - 4MB
 • speed
    ◦ No need to move your hand from the home keys - scrolling, selecting, moving the cursor
    ◦ Changing blocks
    ◦ repeat action, and macros
    ◦ a layer has been removed between your brain and the code
 • cross over to:
    ◦ IDE
    ◦ terminal pager (used by less, man, etc)
    ◦ commande line
    ◦ browser (Vimium)
 • customisability and super mega rad pluggins
    ◦ vimscript
    ◦ vim-gitgutter
    ◦ autopairs
    ◦ ctrl-p
        ignore files in setting
    ◦ vim-surround 
    ◦ language specific pluging
       ▸ syntax highting, linting, completion, docs, etc
 • speed of updates
    ◦ neovim
 • Bang!
    ◦ run your test with a shortcut
       ▸ put this in your .vimrc in the javascript autogroup and press `\t` to test the current file: `nnoremap <localleader>t :!npm test %1`
 • SSH into a dev box and do all coding in Vim


###why you wouldn't use Vim
 • You can't touch type
 • You prefer Emacs
 • You are have an extremly urgent project due in 2 weeks
 • Status quo bias in effect

###vi mode in the terminal
 • if you're going to use Vim, it helps to set vi editing mode in the command line

####~/.inputrc
{{{sh
$include /etc/inputrc
set completion-ignore-case On
set editing-mode vi set keymap vi-command

# many more commands to be found here: http://linux.about.com/library/cmd/blcmdl3_readline.htm
# see also: http://ss64.com/bash/syntax-inputrc.html
$if mode=vi

  set keymap vi-command
  # these are for vi-command mode
  Control-l: clear-screen
  "H": vi-first-print
  "L": end-of-line

  set keymap vi-insert
  # these are for vi-insert mode
  Control-l: clear-screen
  Control-p: previous-history
  "jk": vi-movement-mode
$endif
}}}

###how to get started
 • Remap Caps Lock to Ctrl 
 • The suggested order of addoption:
    ◦ movement keys and getting in and out of insert mode
       ▸ move a little: <esc><c-c>iv, hjkl (disable arrow keys if you have to)
       ▸ move a bit further: <c-d><c-u> w b $ ^ {}
       ▸ jump: fFtT;
       ▸ search: /?np
    ◦ operator pending keys:
       ▸ delete or change stuff: dc
    ◦ learn to use the clipboard
    ◦ install ctrl-p with pathogen
 • Peepcode screencast - Smash into Vim (https://www.pluralsight.com/courses/smash-into-vim)
 • http://www.openvim.com/tutorial.html
 • https://vim-adventures.com/
 • https://www.easysession.com/products/vim-vi-keyboard-cover

###how to get fast
 • Get better at touch typing
    ◦ Put your weakest characters in your passwords
 • Disable crutch keys (arrows, backspace, or any other key you use when you could use something faster)
    ◦ Don't hold, or press a key multiple times in a row (remap these keys to <nop> if you have to)
 • install vimium extension in the chrome
    ◦ if weak at touch typing digits, enable the option "Use the link's name and numbers for link-hint filtering"

###example .vimrc
~/.vimrc

###tips
 • run though the first half of learn vimscript the hard way to take your vimrc file to the next level.
 • Useful remaps:
    ◦ remap jk and kj to <esc> " makes escaping easier
    ◦ remap H to ^ and L to $ " makes end/start of line movement more intuitive.
 • shell loops done with Vim:
    ◦ generate the list `ls | vim -`
    ◦ transform the list into commands (regex is very useful here)
       ▸ `%s/^\(.*\)$/cp \1 prepend_\1/g` for example TODO: test this
    ◦ run it `:w ! sh`
    ◦ you could also pipe into vim to debug shell loops
 • modeline (see `:help modeline`)
    ◦ Use this for settings specific to individual files, eg, `// vim:nomodifiable`

###vimscript
http://learnvimscriptthehardway.stevelosh.com/

####Footer:
Written using vim-note (https://github.com/xolox/vim-notes)
View this repo in github (https://github.com/jazzabeanie/vimception)

save with :update
see docs with ‘gf’ in normal mode:
 • Note taking syntax
 • Note taking commands

demo most things
focus on convincing (demos will help)
